<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://emiguelt.github.com/</id>
  <title>emiguelt.github.com Syndication</title>
  <updated>2016-11-21T05:00:00Z</updated>
  <link rel="alternate" href="http://emiguelt.github.com/"/>
  <link rel="self" href="http://emiguelt.github.com/atom.xml"/>
  <author>
    <name>Miguel Triana</name>
    <uri>http://emiguelt.github.com</uri>
  </author>
  <entry>
    <id>tag:emiguelt.github.com,2016-11-21:/2016/11/21_summary_notes_on_functional_reactive_programming.html</id>
    <title type="html">Summary - Notes on Functional Reactive programming</title>
    <published>2016-11-21T05:00:00Z</published>
    <updated>2016-11-22T04:13:07Z</updated>
    <link rel="alternate" href="http://emiguelt.github.com/2016/11/21_summary_notes_on_functional_reactive_programming.html"/>
    <content type="html">&lt;h1&gt;PART I&lt;/h1&gt;

&lt;p&gt;https://spring.io/blog/2016/06/07/notes-on-reactive-programming-part-i-the-reactive-landscape&lt;/p&gt;

&lt;p&gt;Intelligent routing of events&lt;/p&gt;

&lt;h2&gt;Use cases&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;External Service Calls: make REST call to heavy services that could block the thread.&lt;/li&gt;
&lt;li&gt;Highly Concurrent message Consumers: Processing through message sending&lt;/li&gt;
&lt;li&gt;Spreadsheets: Set dependencies to execute events that trigger chains of events&lt;/li&gt;
&lt;li&gt;Abstraction Over (A)synchronous Processing&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Comparisons&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ruby Event-machine: Event machine for heavy IO applications&lt;/li&gt;
&lt;li&gt;Actor model: like Akka&lt;/li&gt;
&lt;li&gt;Deferred results (Futures): from Java 1.5 concurrent api&lt;/li&gt;
&lt;li&gt;Map-reduce and fork-join&lt;/li&gt;
&lt;li&gt;Coroutines: building blocks for higher abstractions like actors or streams&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Reactive Programming in Java&lt;/h2&gt;

&lt;p&gt;Coroutines are not native in java, until JDK 9.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reactive streams: Java 9&lt;/li&gt;
&lt;li&gt;RxJava: Netflix library. Good for Java 8 'cause the lambdas&lt;/li&gt;
&lt;li&gt;Reactor: Java framework from Pivotal. Build on Reactive Streams&lt;/li&gt;
&lt;li&gt;Spring framework 5.0: Uses Reactor, but can use RxJava too.&lt;/li&gt;
&lt;li&gt;RatPack: Libraries for High performance services over HTTP. Built on Netty. Can use different Reactive Streams.&lt;/li&gt;
&lt;li&gt;Akka: Actor model for java or scala. Uses Akka streams or Reactive streams&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Why now?
"The promise of Reactive is that you can do more with less, specifically you can process higher loads with fewer threads. This is where the intersection of Reactive and non-blocking, asynchronous I/O comes to the foreground."&lt;/p&gt;

&lt;h1&gt;PART II&lt;/h1&gt;

&lt;p&gt;https://spring.io/blog/2016/06/13/notes-on-reactive-programming-part-ii-writing-some-code&lt;/p&gt;

&lt;p&gt;Source code: https://github.com/emiguelt/funprog/tree/master/notesOnReactive&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Reactive programming&lt;/em&gt; is composed of a sequence of &lt;em&gt;events&lt;/em&gt;, a &lt;em&gt;publisher&lt;/em&gt; and a &lt;em&gt;suscriber&lt;/em&gt;. The sequence of events are also called &lt;em&gt;Streams&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;ProjectReactor&lt;/em&gt; a publisher is a &lt;em&gt;Flux&lt;/em&gt;  (&lt;em&gt;Observable&lt;/em&gt; in RxJava)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Generators&lt;/em&gt;: A Flux generates events of a T type (Generics), and has static factory methods.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Single valued sequences&lt;/em&gt;: For Streams with zero or one element it is used &lt;em&gt;Mono&lt;/em&gt; class.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Operators&lt;/em&gt;: Make operations with/over stream's elements, like &lt;code&gt;.log()&lt;/code&gt; or &lt;code&gt;.map()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Flux&amp;lt;String&amp;gt; flux = Flux.just("juan", "pedro", "maria");
flux.log().map(String::toUpperCase);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   &lt;em&gt;Note:&lt;/em&gt; No data is processed until the flux has at least one subscriber (then the data starts to flow)(Use one of the &lt;em&gt;suscribe()&lt;/em&gt; methods)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Suscribers&lt;/em&gt;: The &lt;em&gt;suscribe()&lt;/em&gt; methods return operators (if any) and request the flux to start generating data. &lt;em&gt;Subscribe()&lt;/em&gt; methods are overridden, so there are a lot of options to start the flux. One options is to pass a function for the &lt;em&gt;onNext()&lt;/em&gt; methods or pass a full subscriber.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;em&gt;doOn*&lt;/em&gt; methods to listen for specific events of the flux&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Subscribe()&lt;/em&gt; methods are overridden with a lot of options, for example, receiving a function for the &lt;em&gt;onNext&lt;/em&gt; event or to receive the full Subscriber.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flux.subscribe() //basic subscription, no listeners
flux.subscribe(System.out::println())  //onNext listener
flux.subscribe(new Subscriber(){...impl...}) //custom subscriber
&lt;/code&gt;&lt;/pre&gt;
</content>
    <summary type="html">Summary from "Notes on reactive programming Spring blog"</summary>
  </entry>
  <entry>
    <id>tag:emiguelt.github.com,2016-08-03:/2016/08/03_configuring_qt_environment_with_googletests.html</id>
    <title type="html">Configuring Qt environment for Mobile development with TDD</title>
    <published>2016-08-03T05:00:00Z</published>
    <updated>2016-08-05T02:50:36Z</updated>
    <link rel="alternate" href="http://emiguelt.github.com/2016/08/03_configuring_qt_environment_with_googletests.html"/>
    <content type="html">&lt;p&gt;&lt;strong&gt;IN PROGRESS...&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Project structure&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;root   
|- root.pro       &amp;lt;--- multiproject
|- src
   |- source.pro  &amp;lt;--- lib project
|- app
   |- app.pro     &amp;lt;--- Desktop/mobile app
|- tests
   |- tests.pro   &amp;lt;--- Console project
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Configuring GoogleTest framework&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Download and compile google tests&lt;/li&gt;
&lt;li&gt;Add library to project&lt;/li&gt;
&lt;li&gt;Execute tests&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;https://github.com/google/googletest/blob/master/googletest/docs/Primer.md&lt;/li&gt;
&lt;li&gt;http://ninetyninefree.blogspot.com.co/2016/02/using-google-test-framework-with-qt.html&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Testing signals &amp;amp; slots&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;http://stackoverflow.com/questions/33829949/how-to-use-qtimers-in-googletest&lt;/li&gt;
&lt;li&gt;http://stackoverflow.com/questions/35509374/qt-test-how-to-stop-execution-when-a-signal-is-emitted&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Qt&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Connecting C++ &amp;amp; Qml (Signals &amp;amp; slots): https://andrew-jones.com/blog/qml2-to-c-and-back-again-with-signals-and-slots/&lt;/p&gt;

&lt;h2&gt;Known problems&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Executing tests from console, not from IDE&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Executing from console needs extra import: http://www.qtcentre.org/threads/26934-Can-t-run-executable-file-directly-Cannot-open-shared-object-file&lt;/li&gt;
&lt;/ul&gt;

</content>
    <summary type="html">Code once, deploy any platform. That is the premise of Qt/C++. In this post I'm going to put all information related to start developing for Android and Desktop using Qt since there are missing steps about</summary>
  </entry>
  <entry>
    <id>tag:emiguelt.github.com,2016-08-01:/2016/08/01_functional_programming_learning_path.html</id>
    <title type="html">Functional programming learning path - The one that worked!</title>
    <published>2016-08-01T05:00:00Z</published>
    <updated>2016-11-22T04:17:09Z</updated>
    <link rel="alternate" href="http://emiguelt.github.com/2016/08/01_functional_programming_learning_path.html"/>
    <content type="html">&lt;p&gt;&lt;strong&gt;IN PROGRESS...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My path:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Book SICP From beginning until Streams&lt;/li&gt;
&lt;li&gt;Clojure marathon&lt;/li&gt;
&lt;li&gt;Learn RX + Video QCon&lt;/li&gt;
&lt;li&gt;Read: Notes on reactive programming (3 parts): https://spring.io/blog/2016/06/07/notes-on-reactive-programming-part-i-the-reactive-landscape&lt;/li&gt;
&lt;li&gt;Functional patterns (WHICH CHAPTERS???)&lt;/li&gt;
&lt;li&gt;Thinking functional (Curry &amp;amp; ????)&lt;/li&gt;
&lt;li&gt;Web dev with Clojure (which???)&lt;/li&gt;
&lt;/ul&gt;

</content>
    <summary type="html">Finally, a quick and effective (for me) walkthrough for learning Functional Programming in Java, Lisp, Clojure, Scala and Javascript</summary>
  </entry>
  <entry>
    <id>tag:emiguelt.github.com,2014-09-10:/2014/09/10_my_scala_learning_guide.html</id>
    <title type="html">My Scala learning guide - OBSOLETE</title>
    <published>2014-09-10T05:00:00Z</published>
    <updated>2016-07-28T03:53:22Z</updated>
    <link rel="alternate" href="http://emiguelt.github.com/2014/09/10_my_scala_learning_guide.html"/>
    <content type="html">&lt;p&gt;Learning Scala language is being a little challenging, first, because functional programming is a really different paradigm for software development, and second, because there are many resources (links, tutorials, books) and sometimes it is a difficult to decide what to read or what to follow to continue in the learning process.&lt;/p&gt;

&lt;p&gt;This guide is not about teaching Scala language, it is about showing the steps I've been following to learn Scala, I will include useful references I've read and the methodology I'm applying to get started with this language.&lt;/p&gt;

&lt;p&gt;I'm a newbie in Scala, and also a newbie in making learning guides, but maybe some of my experiences in this process are helpful for anybody wanting to learn Scala.&lt;/p&gt;

&lt;h2&gt;Organization&lt;/h2&gt;

&lt;p&gt;I'm going to split this article in three sections, first it is  described quickly my learning methodology, then it is shown I have done, which has been the references/resources I've studied, and finally, an unordered list of resources I've found to choose the next step in my process.&lt;/p&gt;

&lt;h3&gt;Note&lt;/h3&gt;

&lt;p&gt;This article is still in development, so the contents will change in any moment.&lt;/p&gt;

&lt;h2&gt;1. Methodoloy&lt;/h2&gt;

&lt;h2&gt;2. Step by Step&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Follow&lt;/strong&gt; the Functional programming principles in Scala online course at &lt;a href='https://www.coursera.org/course/progfun' target='_blank'&gt;Coursera&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;3. Resources to choose next step&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ninety nine scala problems &lt;a href="http://aperiodic.net/phil/scala/s-99/" target="_blank"&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
    <summary type="html">A guide that collect my experiences learning the Scala programming language</summary>
  </entry>
  <entry>
    <id>tag:emiguelt.github.com,2013-11-30:/2013/11/30_jade_backbone.html</id>
    <title type="html">Jade, Backbone.js and Require.js, a running example</title>
    <published>2013-11-30T05:00:00Z</published>
    <updated>2016-08-04T22:51:46Z</updated>
    <link rel="alternate" href="http://emiguelt.github.com/2013/11/30_jade_backbone.html"/>
    <content type="html">&lt;p&gt;I like &lt;a href='http://jade-lang.com/' target='_blank'&gt;Jade&lt;/a&gt; a lot for HTML templating. Currently I'm learning Backbone.js, so after a couple of examples I wanted to use Jade for HTML generation as well as HTML template engine in the client-side. During my searching I didn't found a concrete example using the three technologies (Jade, Backbone and Require), so with this post I want to give some clues to use them successfully.&lt;/p&gt;

&lt;h2&gt;The example&lt;/h2&gt;

&lt;p&gt;The example is the typical TODO application. The original code is from the &lt;a href='http://addyosmani.github.io/backbone-fundamentals/#exercise-3-your-first-modular-backbone-requirejs-app' target='_blank'&gt;example 3&lt;/a&gt; of the book Developing Backbone.js (by Addy Osmani). The final code can be checked &lt;a href='https://github.com/emiguelt/javascriptLearning/tree/master/backbone/dbba_todos_requirejs' target='_blank'&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Configuring Jade&lt;/h2&gt;

&lt;h3&gt;HTML generation&lt;/h3&gt;

&lt;p&gt;The start page (&lt;em&gt;index.html&lt;/em&gt;) is generated with &lt;em&gt;Jade&lt;/em&gt; and the &lt;em&gt;index.jade&lt;/em&gt; file.
    jade -P -o ./deploy ./app/index.jade&lt;/p&gt;

&lt;h3&gt;Jade templates on client-side&lt;/h3&gt;

&lt;p&gt;There is a Jade browser-compatible version to compile the Jade templates on the cliente-side, but it is advisable to compile the jade files (as javascript) on the server-side and execute them on the browser. For this reason runtime.js to is used to merge the jade-compiled files.&lt;/p&gt;

&lt;p&gt;Runtime.js is AMD-compatible, but compiled templates are anonymous functions, so &lt;a href='https://github.com/mysociety/node-jade-amd' target:'_blank'&gt;node-jade-amd&lt;/a&gt; is used to generate require.js-compatible functions.
    jade-amd  --from app/templates --to deploy/js/templates&lt;/p&gt;

&lt;h2&gt;Integrating Jade and Backbone.js with Require.js&lt;/h2&gt;

&lt;p&gt;Underscore.js is the default Backbone templating engine. It is ovewritten by loading the runtime.js (from Jade) and calling the jade-compiled files in the module definitions.&lt;/p&gt;

&lt;h3&gt;require.config&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;require.config({
  shim: {
    backbone:{
      deps:['jquery'],
      exports: 'Backbone'
    }
  },
  paths:{
    jquery: 'libs/jquery.min',
    backbone: 'libs/backbone-min',
    "backbone.localStorage": 'libs/backbone.localStorage',
    underscore: 'libs/underscore-min',
    jadeRuntime: 'libs/jadeRuntime',
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Backbone is not AMD-compatible, so Require's &lt;em&gt;shim&lt;/em&gt; feature is used&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;paths&lt;/em&gt; config says to require.js where required .js files are located (note that just external files are referenced)&lt;/li&gt;
&lt;li&gt;runtime.js calls &lt;em&gt;define&lt;/em&gt; method from require.js without name, so it is configured with the file's name, so I renamed it to &lt;em&gt;jadeRuntime.js&lt;/em&gt; because it is the default name used with &lt;em&gt;node-jade-amd&lt;/em&gt; compiled templates.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Using jade-compile files in Backbone.js with Require.js&lt;/h3&gt;

&lt;p&gt;Once the templates have been compiled on the server-side, now we can call them at the client_side via require.js on the module definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;define(['templates/my_jade_compiled_witout_dotjs'], function(templatesVariable){
  template: templateVariable,...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;templateVariable&lt;/em&gt; is a function that receives the model to be merged with the template. It is no necessary  &lt;em&gt;jadeRuntime&lt;/em&gt; on the module definition since it is called  in the template compiled with &lt;em&gt;jade-amd&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then it could be invoked in the &lt;em&gt;render&lt;/em&gt; method to generate the HTML&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
render: function(){
  this.$el.html(this.template(this.model.toJSON())); 
  },
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Deploy&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Makefile&lt;/em&gt; defines how the application is organized on the client side.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- deploy
|- index.html //Jade-generated
|- css
|- js
   |- collections // backbone
   |- libs // jadeRuntime.js (runtime.js from Jade renamed), other libs (backbone, underscore, etc)
   |- models //backone
   |- templates  // js jade-compiled with jade-amd
   |- routers //backbone
   |- views //backone
   |- main.js // require config, app start
   |- common.js //utils
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's all. For more details about the implementation, please check the full example &lt;a href='https://github.com/emiguelt/javascriptLearning/tree/master/backbone/dbba_todos_requirejs' target='_blank'&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
    <summary type="html">This is an example of Jade (runtime) integration with Backbone.js with RequireJS</summary>
  </entry>
</feed>
