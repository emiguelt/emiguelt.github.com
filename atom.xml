<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://emiguelt.github.com/</id>
  <title>emiguelt.github.com Syndication</title>
  <updated>2016-08-03T05:00:00Z</updated>
  <link rel="alternate" href="http://emiguelt.github.com/"/>
  <link rel="self" href="http://emiguelt.github.com/atom.xml"/>
  <author>
    <name>Miguel Triana</name>
    <uri>http://emiguelt.github.com</uri>
  </author>
  <entry>
    <id>tag:emiguelt.github.com,2016-08-03:/2016/08/03_configuring_qt_environment_with_googletests.html</id>
    <title type="html">Configuring Qt environment for Mobile development with TDD</title>
    <published>2016-08-03T05:00:00Z</published>
    <updated>2016-08-04T22:57:52Z</updated>
    <link rel="alternate" href="http://emiguelt.github.com/2016/08/03_configuring_qt_environment_with_googletests.html"/>
    <content type="html">&lt;p&gt;&lt;strong&gt;IN PROGRESS...&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Project structure&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;root   
|- root.pro       &amp;lt;--- multiproject
|- src
   |- source.pro  &amp;lt;--- lib project
|- app
   |- app.pro     &amp;lt;--- Desktop/mobile app
|- tests
   |- tests.pro   &amp;lt;--- Console project
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Configuring GoogleTest framework&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Download and compile google tests&lt;/li&gt;
&lt;li&gt;Add library to project&lt;/li&gt;
&lt;li&gt;Execute tests&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;https://github.com/google/googletest/blob/master/googletest/docs/Primer.md&lt;/li&gt;
&lt;li&gt;http://ninetyninefree.blogspot.com.co/2016/02/using-google-test-framework-with-qt.html&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Testing signals &amp;amp; slots&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;http://stackoverflow.com/questions/33829949/how-to-use-qtimers-in-googletest&lt;/li&gt;
&lt;li&gt;&lt;p&gt;http://stackoverflow.com/questions/35509374/qt-test-how-to-stop-execution-when-a-signal-is-emitted
*&lt;/p&gt;

&lt;h2&gt;Known problems&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Executing tests from console, not from IDE&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Executing from console needs extra import: http://www.qtcentre.org/threads/26934-Can-t-run-executable-file-directly-Cannot-open-shared-object-file&lt;/li&gt;
&lt;/ul&gt;

</content>
    <summary type="html">Code once, deploy any platform. That is the premise of Qt/C++. In this post I'm going to put all information related to start developing for Android and Desktop using Qt since there are missing steps about</summary>
  </entry>
  <entry>
    <id>tag:emiguelt.github.com,2016-08-01:/2016/08/01_functional_programming_learning_path.html</id>
    <title type="html">Functional programming learning path - The one that worked!</title>
    <published>2016-08-01T05:00:00Z</published>
    <updated>2016-08-03T23:59:03Z</updated>
    <link rel="alternate" href="http://emiguelt.github.com/2016/08/01_functional_programming_learning_path.html"/>
    <content type="html">&lt;p&gt;&lt;strong&gt;IN PROGRESS...&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My path:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Book SICP From beginning until Streams&lt;/li&gt;
&lt;li&gt;Clojure marathon&lt;/li&gt;
&lt;li&gt;Learn RX + Video QCon&lt;/li&gt;
&lt;li&gt;Functional patterns (WHICH CHAPTERS???)&lt;/li&gt;
&lt;li&gt;Thinking functional (Curry &amp;amp; ????)

&lt;h2&gt;- Web dev with Clojure (which???)&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
    <summary type="html">Finally, a quick and effective (for me) walkthrough for learning Functional Programming in Java, Lisp, Clojure, Scala and Javascript</summary>
  </entry>
  <entry>
    <id>tag:emiguelt.github.com,2014-09-10:/2014/09/10_my_scala_learning_guide.html</id>
    <title type="html">My Scala learning guide - OBSOLETE</title>
    <published>2014-09-10T05:00:00Z</published>
    <updated>2016-07-28T03:53:22Z</updated>
    <link rel="alternate" href="http://emiguelt.github.com/2014/09/10_my_scala_learning_guide.html"/>
    <content type="html">&lt;p&gt;Learning Scala language is being a little challenging, first, because functional programming is a really different paradigm for software development, and second, because there are many resources (links, tutorials, books) and sometimes it is a difficult to decide what to read or what to follow to continue in the learning process.&lt;/p&gt;

&lt;p&gt;This guide is not about teaching Scala language, it is about showing the steps I've been following to learn Scala, I will include useful references I've read and the methodology I'm applying to get started with this language.&lt;/p&gt;

&lt;p&gt;I'm a newbie in Scala, and also a newbie in making learning guides, but maybe some of my experiences in this process are helpful for anybody wanting to learn Scala.&lt;/p&gt;

&lt;h2&gt;Organization&lt;/h2&gt;

&lt;p&gt;I'm going to split this article in three sections, first it is  described quickly my learning methodology, then it is shown I have done, which has been the references/resources I've studied, and finally, an unordered list of resources I've found to choose the next step in my process.&lt;/p&gt;

&lt;h3&gt;Note&lt;/h3&gt;

&lt;p&gt;This article is still in development, so the contents will change in any moment.&lt;/p&gt;

&lt;h2&gt;1. Methodoloy&lt;/h2&gt;

&lt;h2&gt;2. Step by Step&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Follow&lt;/strong&gt; the Functional programming principles in Scala online course at &lt;a href='https://www.coursera.org/course/progfun' target='_blank'&gt;Coursera&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;3. Resources to choose next step&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ninety nine scala problems &lt;a href="http://aperiodic.net/phil/scala/s-99/" target="_blank"&gt;Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
    <summary type="html">A guide that collect my experiences learning the Scala programming language</summary>
  </entry>
  <entry>
    <id>tag:emiguelt.github.com,2013-11-30:/2013/11/30_jade_backbone.html</id>
    <title type="html">Jade, Backbone.js and Require.js, a running example</title>
    <published>2013-11-30T05:00:00Z</published>
    <updated>2016-08-04T22:51:46Z</updated>
    <link rel="alternate" href="http://emiguelt.github.com/2013/11/30_jade_backbone.html"/>
    <content type="html">&lt;p&gt;I like &lt;a href='http://jade-lang.com/' target='_blank'&gt;Jade&lt;/a&gt; a lot for HTML templating. Currently I'm learning Backbone.js, so after a couple of examples I wanted to use Jade for HTML generation as well as HTML template engine in the client-side. During my searching I didn't found a concrete example using the three technologies (Jade, Backbone and Require), so with this post I want to give some clues to use them successfully.&lt;/p&gt;

&lt;h2&gt;The example&lt;/h2&gt;

&lt;p&gt;The example is the typical TODO application. The original code is from the &lt;a href='http://addyosmani.github.io/backbone-fundamentals/#exercise-3-your-first-modular-backbone-requirejs-app' target='_blank'&gt;example 3&lt;/a&gt; of the book Developing Backbone.js (by Addy Osmani). The final code can be checked &lt;a href='https://github.com/emiguelt/javascriptLearning/tree/master/backbone/dbba_todos_requirejs' target='_blank'&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Configuring Jade&lt;/h2&gt;

&lt;h3&gt;HTML generation&lt;/h3&gt;

&lt;p&gt;The start page (&lt;em&gt;index.html&lt;/em&gt;) is generated with &lt;em&gt;Jade&lt;/em&gt; and the &lt;em&gt;index.jade&lt;/em&gt; file.
    jade -P -o ./deploy ./app/index.jade&lt;/p&gt;

&lt;h3&gt;Jade templates on client-side&lt;/h3&gt;

&lt;p&gt;There is a Jade browser-compatible version to compile the Jade templates on the cliente-side, but it is advisable to compile the jade files (as javascript) on the server-side and execute them on the browser. For this reason runtime.js to is used to merge the jade-compiled files.&lt;/p&gt;

&lt;p&gt;Runtime.js is AMD-compatible, but compiled templates are anonymous functions, so &lt;a href='https://github.com/mysociety/node-jade-amd' target:'_blank'&gt;node-jade-amd&lt;/a&gt; is used to generate require.js-compatible functions.
    jade-amd  --from app/templates --to deploy/js/templates&lt;/p&gt;

&lt;h2&gt;Integrating Jade and Backbone.js with Require.js&lt;/h2&gt;

&lt;p&gt;Underscore.js is the default Backbone templating engine. It is ovewritten by loading the runtime.js (from Jade) and calling the jade-compiled files in the module definitions.&lt;/p&gt;

&lt;h3&gt;require.config&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;require.config({
  shim: {
    backbone:{
      deps:['jquery'],
      exports: 'Backbone'
    }
  },
  paths:{
    jquery: 'libs/jquery.min',
    backbone: 'libs/backbone-min',
    "backbone.localStorage": 'libs/backbone.localStorage',
    underscore: 'libs/underscore-min',
    jadeRuntime: 'libs/jadeRuntime',
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Backbone is not AMD-compatible, so Require's &lt;em&gt;shim&lt;/em&gt; feature is used&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;paths&lt;/em&gt; config says to require.js where required .js files are located (note that just external files are referenced)&lt;/li&gt;
&lt;li&gt;runtime.js calls &lt;em&gt;define&lt;/em&gt; method from require.js without name, so it is configured with the file's name, so I renamed it to &lt;em&gt;jadeRuntime.js&lt;/em&gt; because it is the default name used with &lt;em&gt;node-jade-amd&lt;/em&gt; compiled templates.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Using jade-compile files in Backbone.js with Require.js&lt;/h3&gt;

&lt;p&gt;Once the templates have been compiled on the server-side, now we can call them at the client_side via require.js on the module definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;define(['templates/my_jade_compiled_witout_dotjs'], function(templatesVariable){
  template: templateVariable,...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;templateVariable&lt;/em&gt; is a function that receives the model to be merged with the template. It is no necessary  &lt;em&gt;jadeRuntime&lt;/em&gt; on the module definition since it is called  in the template compiled with &lt;em&gt;jade-amd&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then it could be invoked in the &lt;em&gt;render&lt;/em&gt; method to generate the HTML&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
render: function(){
  this.$el.html(this.template(this.model.toJSON())); 
  },
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Deploy&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Makefile&lt;/em&gt; defines how the application is organized on the client side.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- deploy
|- index.html //Jade-generated
|- css
|- js
   |- collections // backbone
   |- libs // jadeRuntime.js (runtime.js from Jade renamed), other libs (backbone, underscore, etc)
   |- models //backone
   |- templates  // js jade-compiled with jade-amd
   |- routers //backbone
   |- views //backone
   |- main.js // require config, app start
   |- common.js //utils
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's all. For more details about the implementation, please check the full example &lt;a href='https://github.com/emiguelt/javascriptLearning/tree/master/backbone/dbba_todos_requirejs' target='_blank'&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
    <summary type="html">This is an example of Jade (runtime) integration with Backbone.js with RequireJS</summary>
  </entry>
  <entry>
    <id>tag:emiguelt.github.com,2012-05-20:/2012/05/20_Spring_summary_p2.html</id>
    <title type="html">Resumen Spring - Parte 2</title>
    <published>2012-05-20T05:00:00Z</published>
    <updated>2012-06-09T19:21:21Z</updated>
    <link rel="alternate" href="http://emiguelt.github.com/2012/05/20_Spring_summary_p2.html"/>
    <content type="html">&lt;p&gt;Esta es la segunda parte del resumen del framework de desarrollo Java (principalmente Web) Spring, basado en el libro &lt;a href="http://www.manning.com/walls4/" target="_blank"&gt;Spring in Action, Third Edition&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Database&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;DAO (Data Access Object): define el acceso a datos por medio de una interface usada por el resto de la aplicación para consultar/guardar información&lt;/li&gt;
&lt;/ul&gt;


&lt;h5&gt;Principio POO: Programe para Interfaces para reducir acoplamiento&lt;/h5&gt;

&lt;h2&gt;Data access exceptions in Spring&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Spring provee un rango mucho mas variado y detallado de excepciones de accesso a base de datos que JDBC.&lt;/li&gt;
&lt;li&gt;Todas las excepciones extienden &lt;em&gt;DataAccessException&lt;/em&gt; la cual es &lt;em&gt;unchecked&lt;/em&gt; y por lo tanto no necesita tener un &lt;em&gt;handle&lt;/em&gt; (pero en alguna capa superior debe ser tratada).&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Data Access Templates&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Spring sigue el patrón &lt;em&gt;TemplateMethod&lt;/em&gt; para definir reducir la escritura de código repetitivo, como inicialización de recursos, transacciones, commits, etc. De esta forma, solo es necesario implementar un método que prepara los datos para la consulta, la ejecuta y procesa los resultados.&lt;/li&gt;
&lt;li&gt;Spring ofrece diferentes template dependiendo la plataforma, pueden ser JdbcTemplate, HibernateTemplate o JpaTemplate, entre otros.&lt;/li&gt;
&lt;li&gt;Para la implementación de DAOs, Spring también ofrece varios tipos de DAO  para ser extendidas y reaprovechar código (SimpleJdbcDaoSupport, HibernateDaoSupport, JpaDaoSupport, entre otros).&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Configuración del DataSource&lt;/h2&gt;

&lt;p&gt;Un DataSource mantiene la configuración de accesso a la base de datos, puede ser JDBC driver, JNDI o Pool connections (último es recomendado)&lt;/p&gt;

&lt;h3&gt;JNDI&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;jee:jndi-lookup id="dataSource"
jndi-name="/jdbc/MyDataBaseDS" resource-ref="true" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;resource-ref=true: adds &lt;code&gt;java:/comp/env&lt;/code&gt; to jndi-name&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Pooled data&lt;/h3&gt;

&lt;p&gt;Ejemplo usando Jakarta Commons Database Connection Pooling (DBCP)
    &lt;bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"&gt;
      &lt;property name="driverClassName" value="org.hsqldb.jdbcDriver" /&gt;
      &lt;property name="url" value="jdbc:hsqldb:hsql://localhost/name1/name2" /&gt;
      &lt;property name="username" value="user" /&gt;
      &lt;property name="password" value="pass" /&gt;
      &lt;property name="initialSize" value="5" /&gt;
      &lt;property name="maxActive" value="10" /&gt;
    &lt;/bean&gt;&lt;/p&gt;

&lt;h3&gt;JDBC driver-based&lt;/h3&gt;

&lt;p&gt;Ejemplo usa la misma estructura que Pooled data, pero cambia la clase del bean:
* org.springframework.jdbc.datasource.DriverManagerDataSource: Retorna una conexión nueva siempre.
* org.springframework.jdbc.datasource.SingleConnectionDataSource: retorna siempre la misma conexión.&lt;/p&gt;

&lt;h2&gt;JDBC template en Spring&lt;/h2&gt;

&lt;p&gt;Hay tres tipos de templates: (1) JdbcTemplate, (2) NameParameterTemplate y (3) SimpleJdbcTemplate. El tercero es el mas usado actualmente.&lt;/p&gt;

&lt;h3&gt;SimpleJdbcTemplate&lt;/h3&gt;

&lt;p&gt;Pasos (ejemplo)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Configurar el template incluyendo el &lt;code&gt;datasource&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;   &lt;bean id="myJdbcTemplate"
     class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate"&gt;
     &lt;constructor-arg ref="dataSource" /&gt;
   &lt;/bean&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configurar los DAO para usar el template&lt;/p&gt;

&lt;p&gt;   public class MyObjectJdbcDAO implements MyObjectDAO {
   ...
     private SimpleJdbcTemplate jdbcTemplate;
     public void setJdbcTemplate(SimpleJdbcTemplate jdbcTemplate) {
       this.jdbcTemplate = jdbcTemplate;
     }
   }
   //En el XML
    &lt;bean id="myObjectDao"
     class="net.emtg.spring.persistence.SimpleJdbcTemplateSpitterDao"&gt;
     &lt;property name="jdbcTemplate" ref="jdbcTemplate" /&gt;
    &lt;/bean&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Usar el template: para usar el template pueden ser usados &lt;em&gt;named parameters&lt;/em&gt; para definir sentencias SQL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MyObjectJdbcDAO implements MyObjectDAO {
 private static final String INSERT_OBJECT="insert into mytable " +
   "(name, lastname, birthday) " +
   "values (:firstname, :lastname, :birthday)";

 public saveObject(MyObject myObj){
   Map&amp;lt;String, Object&amp;gt; params = new HashMap&amp;lt;String, Object&amp;gt;();
   params.put("firstname", myObj.getName());
   params.put("lastname", myObj.getLastName());
   params.put("birthday", myObj.getBirthday());

   jdbcTemplate. update(INSERT_OBJECT, params);
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Consultar la base de datos:&lt;/p&gt;

&lt;p&gt;  public class MyObjectJdbcDAO implements MyObjectDAO{
    private static final String SELECT_OBJECT="select * from "+
      mytable where id=?";&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public MyObject getObject(String id){
  return jdbTemplate.queryForObject(
    SELECT_OBJECT, new ParametrizedRowMapper&amp;lt;MyObject&amp;gt;(){
      public MyObject mapRow(ResultSet rs, int rowNum) throws SQLException{
        MyObject myObj = new MyObject();
        myObj.setId(rs.getString(1));
        myObj.setName(rs.getString(2)); 
        myObj.setLastName(rs.getString(3));
        myObj.setBirthday(rs.getString(4));
        return myObj;
      }
    }, id);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;DAO Support&lt;/h4&gt;

&lt;p&gt;Spring viene con e clases que pueden ser extendidas por los DAOs e evitar código repetitivo (SimpleJdbcDAOSupport).&lt;/p&gt;

&lt;h2&gt;Integracion Spring / Hibernate&lt;/h2&gt;

&lt;h3&gt;Hibernate Session Factory&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Interface org.hibernate.Session define todas las operaciones CRUD&lt;/li&gt;
&lt;li&gt;En Spring se usa Hibernate Session Factory para obtener una Session, las factories son encargadas de administrar la session (abrir, cerrar...)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Hay dos formas de configurar Hiberntate en Spring:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;LocalSessionFactoryBean: Configura Hibernate usando XML que mapean las tablas, ejemplo:&lt;/p&gt;

&lt;p&gt;  &lt;bean id="sessionFactory"
    class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"&gt;
      &lt;property name="dataSource" ref="dataSource" /&gt;
      &lt;property name="mappingResources"&gt;
        &lt;list&gt;
          &lt;value&gt;MyObject.hbm.xml &lt;/value&gt;
        &lt;/list&gt;
      &lt;/property&gt;
      &lt;property name="hibernateProperties"&gt;
        &lt;props&gt;
        &lt;prop key="dialect"&gt;org.hibernate.dialect.HSQLDialect&lt;/prop&gt;
        &lt;/props&gt;
      &lt;/property&gt;
    &lt;/bean&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AnnotationSessionFactoryBean: las clases deben estar anotadas con @Entity (JPA), @MappedSuperclass o @Entity (Hibernate)&lt;/p&gt;

&lt;p&gt;   &lt;bean id="sessionFactory"
    class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"&gt;
      &lt;property name="dataSource" ref="dataSource" /&gt;
      &lt;property name="packagesToScan"
      value="com.habuma.spitter.domain" /&gt;
      &lt;property name="hibernateProperties"&gt;
        &lt;props&gt;
         &lt;prop key="dialect"&gt;org.hibernate.dialect.HSQLDialect&lt;/prop&gt;
       &lt;/props&gt;
      &lt;/property&gt;
  &lt;/bean&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Usando Hibernate&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;@Repository
public class MyObjectHbDao extends MyObjectDAO{
  @Autowired
  private SessionFactory sessionFactory;

  public setSessionFactory(SessionFactory sessionFactory){
    this.sessionFactory = sessionFactory;
  }

  private Session getSession(){
    return sessionFactory.getCurrentSession();
  }

  public MyObject getMyObject(String id){
    return getSession().get(MyObject.class, id);
  }

  public void save(MyObject obj){
    getSession().update(obj);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Exception en Hibernate&lt;/h3&gt;

&lt;p&gt;Para capturar excepciones de Hibernate usamos &lt;code&gt;PersistenceExceptionTranslationPostProcessor&lt;/code&gt;, el cual es un bean que "intercepta" las excepciones de cualquier &lt;code&gt;@Repository&lt;/code&gt; y las convierte en Excepciones de Spring.&lt;/p&gt;
</content>
    <summary type="html">Resumen del Framework Spring - Segunda parte</summary>
  </entry>
</feed>
